{"version":3,"sources":["components/Account.tsx","logo.svg","App.tsx","reportWebVitals.js","index.js"],"names":["Account","account","className","tokens","map","token","has","balance","href","address","abi","require","Sentry","dsn","integrations","Integrations","BrowserTracing","tokenAddresses","IndexPage","useState","accounts","setAccounts","web3Enabled","setWeb3Enabled","metamask","message","acct","setAcct","web3","Web3","ethEnabled","a","window","ethereum","enable","on","onClickConnect","useEffect","length","eth","getAccounts","accs","Promise","all","getBalance","tokenInst","Contract","methods","balanceOf","call","b","utils","fromWei","Date","tokenBalances","newAccounts","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2032e63.chunk.js","sourcesContent":["import React from 'react'\nimport {AccountType, TokenType} from './Interfaces';\n\n\ntype PropTypes = {\n  account: AccountType\n}\n\nexport default function Account({\n  account\n}: PropTypes) {\n  return (\n    <>\n     \n     \n        <div className=\"tokens\">\n          {account.tokens.map(token => {\n            if (token.has) {\n            return (\n              <div className=\"token\" key={token.token}>\n                <div className=\"balance\">\n                  <div className=\"balance-value\">\n                  Congrats! You have {token.balance} USDC. Since you have more than 1 you can \n                  <a href=\"https://www.systempoetics.com/USDC\">Proceed.</a>\n                  </div>\n                </div>\n              </div>\n\n            )\n            }else{\n              return (\n                <div className=\"token\" key={token.token}>\n                  <div className=\"balance\">\n                    <div className=\"balance-value\">\n                    In order to proceed you need 1 or more USDC tokens.\n                    </div>\n                  </div>\n                </div>\n  \n              ) \n            }\n          })}\n        </div>\n        <div>&nbsp;</div>\n        <div className=\"account\">\n        <div className=\"address\">\n          <small>FYI you are using wallet: {account.address}</small>\n        </div>\n      </div>\n    </>\n  )\n}","export default __webpack_public_path__ + \"static/media/logo.d5d645c5.svg\";","import Web3 from 'web3'\nimport Account from './components/Account';\nimport {AccountType, TokenType} from './components/Interfaces';\nimport './App.css';\nimport logo from './logo.svg'; \nimport { useState,useEffect } from 'react'\nimport { getAllByPlaceholderText } from '@testing-library/react';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nconst abi  = require('human-standard-token-abi');\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\n\n\n\nSentry.init({\n  dsn: \"https://9fbe65b9ddd940488e6a0b17a5a6ffcf@o1093430.ingest.sentry.io/6112695\",\n  integrations: [new Integrations.BrowserTracing()],\n\n});\n\n\n\nconst tokenAddresses = [{\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  token: 'USDC'\n}]\n\nconst IndexPage = () => {\n  const [accounts, setAccounts] = useState<AccountType[]>([])\n  const [web3Enabled, setWeb3Enabled] = useState(false)\n  const [metamask, setMetamask] = useState(true)\n  const [message, setMessage] = useState(\"\");\n  const [acct, setAcct] = useState<String[]>([]);\n  // Empty web3 instance\n\n  let web3: Web3 = new Web3()\n\n  const ethEnabled = async () => {\n\n    if (typeof window.ethereum !== 'undefined') {\n      web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n\n        return true;\n      } catch (e) {\n        \n        return false\n      }\n\n    }\n\n    return false;\n  }\n\n  window.ethereum.on('accountsChanged', function () {\n    onClickConnect();\n\n  });\n\n  useEffect(() => {\n    if (acct.length ==0 ){\n      onClickConnect();\n    }\n  });\n\n  const onClickConnect = async () => {\n    if (await !ethEnabled()) {\n      //setMessage(\"Please install Metamask.io inorder to use this page.\")\n      //setMetamask(false);\n    }\n    \n    setWeb3Enabled(true);\n    \n   // await window.ethereum.enable();\n    //const id = await window.ethereum.request({ method: 'eth_chainId' });\n\n    var accs = await web3.eth.getAccounts();\n    setAcct(accs);\n    const newAccounts = await Promise.all(accs.map(async (address: string) => {\n      const balance = await web3.eth.getBalance(address)\n      \n      const tokenBalances = await Promise.all(tokenAddresses.map(async (token) => {\n\n        const tokenInst = new web3.eth.Contract(abi, token.address);\n        \n        const balance = await tokenInst.methods.balanceOf(address).call()\n        let b = web3.utils.fromWei(balance, 'ether');\n        Sentry.captureMessage(new Date()+\"App:route4,User:\"+address+\",balance:\"+b);\n        \n        return {\n          token: token.token,\n          has: balance >= 1,\n          balance:b,\n        }\n      }))\n      \n      return {\n        address,\n        tokens: tokenBalances\n      }\n    }))\n  \n    setAccounts(newAccounts)\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {!metamask && <div>{message}</div> }\n         {!web3Enabled && <div><button onClick={onClickConnect}>Connect</button></div>} <div> Do you have USDC?</div>\n         {accounts && accounts.length > 0 && <div className=\"accounts\">\n         {accounts.map((account) => {\n          return (\n            <div className=\"account\" key={account.address}>\n              <Account account={account} />\n            </div>\n          )\n          })}\n             \n          </div>\n          }\n      </header>\n    </div>\n  );\n}\n\nexport default IndexPage;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}